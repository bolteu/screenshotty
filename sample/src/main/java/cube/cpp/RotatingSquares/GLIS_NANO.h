//
// Created by brothercomplex on 4/01/20.
//

#ifndef ACTIVITY_CREATION_GLIS_NANO_H
#define ACTIVITY_CREATION_GLIS_NANO_H



// from libGLIS : GLIS.h - part of the AndroidCompositor project

#define LOG_TAG "EglSample"

bool GLIS_LOG_PRINT_NON_ERRORS = false;
bool GLIS_LOG_PRINT_VERTEX = false;
bool GLIS_LOG_PRINT_CONVERSIONS = false;
bool GLIS_LOG_PRINT_SHAPE_INFO = false;

#include <strings.h>
#include <android/log.h>

#define LOG_INFO(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
#define LOG_ERROR(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)

#include <EGL/egl.h> // requires ndk r5 or newer
#include <string>
#include <GLES/gl.h>

std::string GLIS_INTERNAL_MESSAGE_PREFIX = "";

#define GLIS_SWITCH_CASE_CUSTOM_CASE_CUSTOM_LOGGER_CUSTOM_STRING_CAN_I_PRINT_ERROR(LOGGING_FUNCTION, CASE_NAME, name, const, constSTRING, UNNAMED_STRING_CAN_PRINT_ERROR, UNNAMED_STRING_CANNOT_PRINT_ERROR, NAMED_STRING_CAN_PRINT_ERROR, NAMED_STRING_CANNOT_PRINT_ERROR, PRINT) CASE_NAME: { \
    if(name == nullptr || name == NULL || name == 0) { \
        if (PRINT) { \
            if ((UNNAMED_STRING_CAN_PRINT_ERROR) != nullptr) { \
                std::string msg = GLIS_INTERNAL_MESSAGE_PREFIX; \
                msg += UNNAMED_STRING_CAN_PRINT_ERROR; \
                LOGGING_FUNCTION(msg.c_str(), constSTRING); \
            } \
        } \
        else { \
            if ((UNNAMED_STRING_CANNOT_PRINT_ERROR) != nullptr) { \
                std::string msg = GLIS_INTERNAL_MESSAGE_PREFIX; \
                msg += UNNAMED_STRING_CANNOT_PRINT_ERROR; \
                LOGGING_FUNCTION("%s", msg.c_str()); \
            } \
        } \
    } \
    else { \
        if (PRINT) { \
            if ((NAMED_STRING_CAN_PRINT_ERROR) != nullptr) { \
                std::string msg = GLIS_INTERNAL_MESSAGE_PREFIX; \
                msg += NAMED_STRING_CAN_PRINT_ERROR; \
                LOGGING_FUNCTION(msg.c_str(), name, constSTRING); \
            } \
        } \
        else { \
            if ((NAMED_STRING_CANNOT_PRINT_ERROR) != nullptr) { \
                std::string msg = GLIS_INTERNAL_MESSAGE_PREFIX; \
                msg += NAMED_STRING_CANNOT_PRINT_ERROR; \
                LOGGING_FUNCTION(msg.c_str(), name); \
            } \
        } \
    } \
    break; \
}


#define GLIS_SWITCH_CASE_CUSTOM_LOGGER_CUSTOM_STRING_DONT_PRINT_ERROR(LOGGER, name, const, constSTRING, UNNAMED_STRING, NAMED_STRING) \
    GLIS_SWITCH_CASE_CUSTOM_CASE_CUSTOM_LOGGER_CUSTOM_STRING_CAN_I_PRINT_ERROR(LOGGER, case const, name, const, constSTRING, nullptr, UNNAMED_STRING, nullptr, NAMED_STRING, false)

#define GLIS_SWITCH_CASE_CUSTOM_LOGGER_CUSTOM_STRING(LOGGER, name, const, constSTRING, UNNAMED_STRING, NAMED_STRING) \
    GLIS_SWITCH_CASE_CUSTOM_CASE_CUSTOM_LOGGER_CUSTOM_STRING_CAN_I_PRINT_ERROR(LOGGER, case const, name, const, constSTRING, UNNAMED_STRING, nullptr, NAMED_STRING, nullptr, true)

#define GLIS_ERROR_SWITCH_CASE_CUSTOM_STRING_DONT_PRINT_ERROR(name, const, constSTRING, UNNAMED_STRING, NAMED_STRING) \
    GLIS_SWITCH_CASE_CUSTOM_LOGGER_CUSTOM_STRING_DONT_PRINT_ERROR(LOG_ERROR, name, const, constSTRING, UNNAMED_STRING, NAMED_STRING)

#define GLIS_ERROR_SWITCH_CASE_CUSTOM_STRING(name, const, constSTRING, UNNAMED_STRING, NAMED_STRING) \
    GLIS_SWITCH_CASE_CUSTOM_LOGGER_CUSTOM_STRING(LOG_ERROR, name, const, constSTRING, UNNAMED_STRING, NAMED_STRING)

#define GLIS_ERROR_SWITCH_CASE(name, const) \
    GLIS_ERROR_SWITCH_CASE_CUSTOM_STRING(name, const, #const, "%s", "%s generated error: %s")

#define GLIS_ERROR_SWITCH_CASE_DEFAULT(name, err) \
    GLIS_SWITCH_CASE_CUSTOM_CASE_CUSTOM_LOGGER_CUSTOM_STRING_CAN_I_PRINT_ERROR(LOG_ERROR, default, name, err, err, "Unknown error: %d", "Unknown error", "%s generated an unknown error: %d", "%s generated an unknown error", true)

#define GLIS_boolean_to_string(val, TRUE_VALUE) val == TRUE_VALUE ? "true" : "false"

int GLIS_ERROR_PRINTING_TYPE_FORMAL = 1;
int GLIS_ERROR_PRINTING_TYPE_CODE = 2;
int GLIS_ERROR_PRINTING_TYPE = GLIS_ERROR_PRINTING_TYPE_FORMAL;

#define GLIS_error_to_string_exec(x) x; if (GLIS_ERROR_PRINTING_TYPE == GLIS_ERROR_PRINTING_TYPE_FORMAL) { GLIS_error_to_string(#x); } else { LOG_INFO("%s", std::string(std::string(#x) + ";").c_str()); }
#define GLIS_error_to_string_exec_GL(x) x; if (GLIS_ERROR_PRINTING_TYPE == GLIS_ERROR_PRINTING_TYPE_FORMAL) { GLIS_error_to_string_GL(#x); } else { LOG_INFO("%s", std::string(std::string(#x) + ";").c_str()); }
#define GLIS_error_to_string_exec_EGL(x) x; if (GLIS_ERROR_PRINTING_TYPE == GLIS_ERROR_PRINTING_TYPE_FORMAL) { GLIS_error_to_string_EGL(#x); } else { LOG_INFO("%s", std::string(std::string(#x) + ";").c_str()); }

void GLIS_error_to_string_GL(const char * name, GLint err) {
    GLIS_INTERNAL_MESSAGE_PREFIX = "OpenGL:          ";
    switch(err) {
        // GENERATED BY glGetError() ITSELF
        GLIS_SWITCH_CASE_CUSTOM_LOGGER_CUSTOM_STRING_DONT_PRINT_ERROR(LOG_INFO, name, GL_NO_ERROR,
                                                                      "GL_NO_ERROR",
                                                                      GLIS_LOG_PRINT_NON_ERRORS
                                                                      ? "no error was generated"
                                                                      : nullptr,
                                                                      GLIS_LOG_PRINT_NON_ERRORS
                                                                      ? "%s did not generate an error"
                                                                      : nullptr)
        GLIS_ERROR_SWITCH_CASE(name, GL_INVALID_ENUM)
        GLIS_ERROR_SWITCH_CASE(name, GL_INVALID_VALUE)
        GLIS_ERROR_SWITCH_CASE(name, GL_INVALID_OPERATION)
        GLIS_ERROR_SWITCH_CASE(name, GL_OUT_OF_MEMORY)

        // WHEN ALL ELSE FAILS
        GLIS_ERROR_SWITCH_CASE_DEFAULT(name, err)
    }
    GLIS_INTERNAL_MESSAGE_PREFIX = "";
}

void GLIS_error_to_string_EGL(const char * name, EGLint err) {
    GLIS_INTERNAL_MESSAGE_PREFIX = "OpenGL ES (EGL): ";
    switch(err) {
        // GENERATED BY eglGetError() ITSELF
        GLIS_SWITCH_CASE_CUSTOM_LOGGER_CUSTOM_STRING_DONT_PRINT_ERROR(LOG_INFO, name, EGL_SUCCESS,
                                                                      "EGL_SUCCESS",
                                                                      GLIS_LOG_PRINT_NON_ERRORS
                                                                      ? "no error was generated"
                                                                      : nullptr,
                                                                      GLIS_LOG_PRINT_NON_ERRORS
                                                                      ? "%s did not generate an error"
                                                                      : nullptr)
        GLIS_ERROR_SWITCH_CASE(name, EGL_NOT_INITIALIZED)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_ACCESS)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_ALLOC)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_ATTRIBUTE)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_CONTEXT)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_CONFIG)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_CURRENT_SURFACE)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_DISPLAY)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_SURFACE)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_MATCH)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_PARAMETER)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_NATIVE_PIXMAP)
        GLIS_ERROR_SWITCH_CASE(name, EGL_BAD_NATIVE_WINDOW)
        GLIS_ERROR_SWITCH_CASE(name, EGL_CONTEXT_LOST)

        // WHEN ALL ELSE FAILS
        GLIS_ERROR_SWITCH_CASE_DEFAULT(name, err)
    }
    GLIS_INTERNAL_MESSAGE_PREFIX = "";
}

void GLIS_error_to_string_GL(GLint err) {
    GLIS_error_to_string_GL(nullptr, err);
}

void GLIS_error_to_string_EGL(EGLint err) {
    GLIS_error_to_string_EGL(nullptr, err);
}

void GLIS_error_to_string_GL() {
    GLIS_error_to_string_GL(glGetError());
}

void GLIS_error_to_string_EGL() {
    GLIS_error_to_string_EGL(eglGetError());
}

void GLIS_error_to_string() {
    GLIS_error_to_string_GL();
    GLIS_error_to_string_EGL();
}

void GLIS_error_to_string_GL(const char * name) {
    GLIS_error_to_string_GL(name, glGetError());
}

void GLIS_error_to_string_EGL(const char * name) {
    GLIS_error_to_string_EGL(name, eglGetError());
}

void GLIS_error_to_string(const char * name) {
    GLIS_error_to_string_GL(name);
    GLIS_error_to_string_EGL(name);
}

#endif //ACTIVITY_CREATION_GLIS_NANO_H
